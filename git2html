#!/usr/bin/perl -w
use strict;
use File::Path qw(make_path remove_tree);
use Algorithm::Diff qw(sdiff);
use HTML::Entities;
use Cwd qw(abs_path);

# globals and defaults
my ($gitdir, $file);
my $output   = './out';
my $charset  = 'utf-8';
my $tabwidth = 8;

# enable autoflush
$|++;

#####################################################################################

# CSS descriptions

my $css = '';


$css .= <<EOF;
/*
the following snippet for .triangle-border is
taken from here:
*/
/* ------------------------------------------
PURE CSS SPEECH BUBBLES
by Nicolas Gallagher
- http://nicolasgallagher.com/pure-css-speech-bubbles/

http://nicolasgallagher.com
http://twitter.com/necolas
 
Created: 02 March 2010
Version: 1.2 (03 March 2011)

Dual licensed under MIT and GNU GPLv2 Â© Nicolas Gallagher 
------------------------------------------ */
.triangle-border {
	position:relative;
	padding:15px;
	margin:1em 0 3em;
	border:5px solid #5a8f00;
	color:#333;
	background:#fff;
	/* css3 */
	-webkit-border-radius:10px;
	-moz-border-radius:10px;
	border-radius:10px;
}

.triangle-border:before {
	content:"";
	position:absolute;
	bottom:-20px; /* value = - border-top-width - border-bottom-width */
	left:40px; /* controls horizontal position */
    border-width:20px 20px 0;
	border-style:solid;
    border-color:#5a8f00 transparent;
    /* reduce the damage in FF3.0 */
    display:block; 
    width:0;
}

/* creates the smaller  triangle */
.triangle-border:after {
	content:"";
	position:absolute;
	bottom:-13px; /* value = - border-top-width - border-bottom-width */
	left:47px; /* value = (:before left) + (:before border-left) - (:after border-left) */
	border-width:13px 13px 0;
	border-style:solid;
	border-color:#fff transparent;
    /* reduce the damage in FF3.0 */
    display:block; 
    width:0;
}

EOF
    ;

$css .= <<EOF;
.navbar {
  background:#eca;
  padding:5px;
}

.button {
  background:#fff;
  margin:3px;
  padding:1px;
  font-weight:bolder;
}

.signature {
    margin-top:-30px;
    margin-bottom:30px;
    font-family:Georgia,Serif;
    font-style:italic;
}

.diff {
    border-style: solid none;
    border-width: 20px;
    border-color: #ccc;
  margin: 20px 0;
  padding: 20px 0;
}

.code {
    border-style: none solid;
    border-width: 2px;
    border-color: #ccc;
  margin: 0;
  padding: 0 5px;
    white-space: no-wrap;
}

.red {
  color:red;
 background:#fcc;
}

.green {
  color:green;
 background:#cfc;
}

.blue {
  color:blue;
 background:#ccf;
}

.lightblue {
 background:#eef;
}

.footer {
    font-style: italic;
    font-size: 0.8em;
    text-align: right;
}

EOF
    ;

#####################################################################################

# print help
sub print_help($)
{
    my $rc = shift;

    print <<"EOF";

git2html [-h|--help] [-o <outdir>] [-c <charset>] [-t <tabwidth>] <sourcefile>

 <sourcefile>    the file to convert, must be inside a non-bare git repository

 -o <outdir>     output directory, default is `$output'
                 DIRECTORY WILL BE SILENTLY OVERWRITTEN, BE CAREFUL!

 -c <charset>    HTML charset meta header, default is `$charset'

 -t <tabwidth>   expand tabs to this many spaces, default is `$tabwidth'

 -h, --help      show this help

EOF
;
    
    exit $rc;
}

# parse commandline parameters
sub parse_commandline(@)
{
    my @args = @_;

    while (@args and $args[0] =~ /^-/) {
	my $arg = shift @args;

	if ($arg eq '-h' or $arg eq '--help') {
	    print_help(0);

	} else {
	    my $param = shift @args;
	    die "no parameter given for `$arg'\n" unless defined $param;
	    die "parameter is empty for `$arg'\n" if $param eq '';

	    if ($arg eq '-o') {
		$output = $param;

	    } elsif ($arg eq '-c') {
		$charset = $param;

	    } elsif ($arg eq 't') {
		$tabwidth = $param;
		$param =~ tr/0-9//d;
		die "tabwidth is no integer" unless $param eq '';

	    } else {
		die "unknown switch `$arg'\n";

	    }

	}
    }

    if (@args == 0) {
	print_help(1);
    } elsif ($args[0] eq '-h' or $args[0] eq '--help') {
	print_help(0);
    }
    
    my $param = shift @args;
    die "`$param' is a directory\n" if -d $param;
    die "`$param' is no file\n" unless -f $param;
    
    # parse paths and parametes
    my $realfile = abs_path($param);
    my $realpath = $realfile;
    $realpath =~ s,/[^/]+$,,;
    $gitdir = `cd "$realpath"; git rev-parse --show-toplevel`;
    chomp $gitdir;

    my $len = length $gitdir;
    die "messy paths, ouch! `$gitdir' vs. `$realfile'"
	unless substr($realfile, 0, $len) eq $gitdir;
	
    $file = substr $realfile, $len;
    $file =~ s,^/,,;
	
}

# build git commandline
sub git_cmdline(@)
{
    return join(' ', ('git', "--work-tree=\"${gitdir}\"", "--git-dir=\"${gitdir}/.git\"", @_) );
}

# stupid simple git wrapper
sub git(@)
{
    my @ret = ();
    my $cmd = git_cmdline(@_);
    open GIT, "$cmd |" or die "can't execute `$cmd': $!\n";
    while (my $line = <GIT>) {
	chomp $line;
	push @ret, $line;
    }
    close GIT or die "can't close `$cmd': $!\n";
    return @ret;
}

# format ASCII to HTML
sub htmlize(@)
{
    my $ret = join "\n", @_;
    $ret = encode_entities($ret, "<>&\"'");
    $ret =~ s/\n/<br>/g;
    $ret =~ s/^ /&nbsp;/gm;
    $ret =~ s/  /&nbsp;&nbsp;/g;

    return $ret;
}

# print HTML navbar
sub format_html_navbar($$)
{
    my ($id, $max_id) = (@_);
    my $ret = '<div class="navbar">';

    $ret .= '<span class="button">';
    if ($id > 0) {
	$ret .= sprintf '<a href="%04d.html">&lt;&lt;&lt;</a> ', ($id - 1);
    } else {
	$ret .= '&lt;&lt;&lt; ';
    }
    $ret .= '</span>';

    $ret .= '<span class="button">';
    $ret .= '<a href="../index.html">^^^</a> ';
    $ret .= '</span>';

    $ret .= '<span class="button">';
    if ($id < $max_id - 1) {
	$ret .= sprintf '<a href="%04d.html">&gt;&gt;&gt;</a> ', ($id + 1);
    } else {
	$ret .= '&gt;&gt;&gt; ';
    }
    $ret .= '</span>';

    $ret .= sprintf '(%04d/%04d)', $id+1, $max_id;

    $ret .= '</div>';
    return $ret;
}

# print HTML header
sub format_html_header()
{
    my $ret = "<!DOCTYPE html>\n";
    $ret .= '<html><head>';
    $ret .= "<meta charset='$charset'>";
    $ret .= "<style>\n$css\n</style>";
    $ret .= '</head><body>';
    return $ret;
}

# print HTML header
sub format_html_footer()
{
    my $ret .= '<div class="footer">created by <a href="https://github.com/mmitch/git2html/">git2html</a> on ';
    $ret .= localtime;
    $ret .= '</div></body></html>';
    return $ret;
}

# add a <span class=""> tag around a string
sub add_span($$)
{
    my ($text, $class) = @_;
    return sprintf '<span class="%s">%s</span>', $class, $text;
}

# fuse multiple hunks of the same type
sub merge_hunks(@)
{
    my @hunks = @_;
    my @newhunks;

    my $type  = '';
    my $left  = '';
    my $right = '';

    foreach my $hunk_ (@hunks) {
	my ($type_, $left_, $right_) = @{ $hunk_ };
	if ($type ne $type_) {
	    if ($type ne '') {
		push @newhunks, [ $type, $left, $right ];
		$left = $right = '';
	    }
	    $type = $type_;
	}
	$left  .= $left_;
	$right .= $right_;
    }
    if ($type ne '') {
	push @newhunks, [ $type, $left, $right ];
    }
    
    return @newhunks;
}

# diff a single line
sub diff_single_line($$)
{
    # diff within diff :)
    # we must go deeper

    my ($left, $right) = @_;
    my $left_  = '';
    my $right_ = '';

    # split into single characters and run diff
    my @hunks = sdiff( [ split(//, $left) ], [ split(//, $right) ] );

    # merge hunks if possible
    @hunks = merge_hunks( @hunks );

    # no check what has happened:
    # - max. 2 insertions and/or deletions -> mark green/red
    # - multiple insertions or changes on both sides -> mark everything blue from first to last change
    my %changes = (
	'c' => 0,
	'+' => 0,
	'-' => 0,
    );
    foreach my $hunk (@hunks) {
	$changes{ @{$hunk}[0] }++;
    }

    if ( $changes{'c'} == 0 and $changes{'+'} < 3 and $changes{'-'} < 3 ) {
	# green/red
	foreach my $hunk (@hunks) {

	    my ($type, $left, $right) = @{ $hunk };
			
	    $left  = htmlize( $left );
	    $right = htmlize( $right );
			
	    # this is not perfect: multiple lightblue spans may stay unfused

	    if ($type eq '-') { # left is removed
		$left_  .= add_span($left,  'red');
		$right_ .= add_span($right, 'lightblue');
		
	    } elsif ($type eq '+') { # right is added
		$left_  .= add_span($left , 'lightblue');
		$right_ .= add_span($right, 'green');
		
	    } elsif ($type eq 'u') { # unchanged
		$left_  .= add_span($left , 'lightblue');
		$right_ .= add_span($right, 'lightblue');
			    
	    } elsif ($type eq 'c') { # both changed
			    
		die "we can't be here!";

	    } else {

		die "we can't be here, neither!";

	    }

	}

    } else {

	# transform type markers to string
	my $tokens =
	    join '',
	        map { @{$_}[0] }
	            @hunks;
	
	# extract hunk contents
	my @left  = map { @{$_}[1] } @hunks;
	my @right = map { @{$_}[2] } @hunks;

	# scan for unchanged/changed/unchanged parts
	die unless $tokens =~ /^(u*)(.*?)(u*)$/;

	# convert tokens to hunk contents
	my ($l1, $l2, $l3) = ('', '', '');
	$l1 .= shift @left  foreach ( 1 .. length $1 );
	$l2 .= shift @left  foreach ( 1 .. length $2 );
	$l3 .= shift @left  foreach ( 1 .. length $3 );

	my ($r1, $r2, $r3) = ('', '', '');
	$r1 .= shift @right foreach ( 1 .. length $1 );
	$r2 .= shift @right foreach ( 1 .. length $2 );
	$r3 .= shift @right foreach ( 1 .. length $3 );

	# do html conversion
	($l1, $l2, $l3) = map { htmlize $_ } ($l1, $l2, $l3);
	($r1, $r2, $r3) = map { htmlize $_ } ($r1, $r2, $r3);

	# format parts
	$l1 = add_span($l1, 'lightblue') unless $l1 eq '';
	$l2 = add_span($l2, 'blue')      unless $l2 eq '';
	$l3 = add_span($l3, 'lightblue') unless $l3 eq '';

	$r1 = add_span($r1, 'lightblue') unless $r1 eq '';
	$r2 = add_span($r2, 'blue')      unless $r2 eq '';
	$r3 = add_span($r3, 'lightblue') unless $r3 eq '';
	
	# concatenate result
	$left_  = $l1.$l2.$l3;
	$right_ = $r1.$r2.$r3;
	
    }

    return ($left_, $right_);

}

#####################################################################################

# setup configuration
parse_commandline(@ARGV);
print "git repo   = `$gitdir'\n";
print "file       = `$file'\n";
print "output dir = `$output'\n";
print "charset    = `$charset'\n";


# prepare output dir
die "output directory `$output' already exists as a file - won't overwrite\n" if -f $output;
remove_tree($output);
make_path($output);


# read all branches
printf "\nreading branches...\n";
my %branch = 
    map { $_ => {} }
        map { substr ($_, 2) }
            git('branch');
printf "%s\n", 'x' x scalar keys %branch;


# read all commits
printf "\nreading commits...\n";
foreach my $branch (keys %branch) {

    # get all commits from log
    my @commits =
	map { (split(/ /, $_, 2))[0] }
            git('log', '--format=oneline', $branch, '--', $file);

    $branch{$branch} = {
	BRANCH  => $branch,
	HEAD    => $commits[0],
	COMMITS => \@commits
    };

    print "x";
}
print "\n";

    
# try to remove duplicate commits
printf "\npruning commits...\n";
foreach my $branch (keys %branch) {

    # get the heads of all other branches
    my @heads = 
	map { $branch{$_}->{HEAD} }
            grep { $_ ne $branch }
                keys %branch;

    # prune commits when reaching the HEAD of another branch
    # also reverse the commits
    my @commits;
    foreach my $commit ( @{$branch{$branch}->{COMMITS}} ) {
	unshift @commits, $commit;
	last if (grep { $_ eq $commit } @heads) > 0;
    }
	
    # store pruned commit list
    $branch{$branch}->{COMMITS} = \@commits;

    print "x";
}
print "\n";

    
# remove branches without changes
printf "\npruning branches...\n";
{
    my %branch_ =
	map { $_ => $branch{$_} }
            grep { @{$branch{$_}->{COMMITS}} > 1 }
                keys %branch;
    %branch = %branch_;
}
printf "%s\n", 'x' x scalar keys %branch;

    
# process all branches
foreach my $branch (keys %branch) {
    print "\nprocessing branch <$branch>...\n";

    my @commits = @{$branch{$branch}->{COMMITS}};

    my $outdir = "${output}/${branch}";
    make_path($outdir);

    # extract all unique file revisions

    foreach my $commit (@commits) {

	my $cmd = git_cmdline('cat-file', 'blob', "${commit}:${file}");
	system( "$cmd | expand -t $tabwidth > \"$outdir/$commit\"" );

    }

    # create individual diffs

    my $lastcommit = undef;
    my $id = 0;
    my $lastfile;
    my $max_id = @commits - 1;
    foreach my $commit (@commits) {
	
	open FILE, '<', "$outdir/$commit" or die "can't open `$outdir/$commit': $!";
	my $curfile = [ <FILE> ];
	chomp @{ $curfile };
	close FILE or die "can't open `$outdir/$commit': $!";

	if ($lastfile) {

	    my $htmlfile = sprintf '%s/%04d.html', $outdir, $id;
	    open HTML, '>', $htmlfile or die "can't open `$htmlfile': $1";

	    print HTML format_html_header();

	    print HTML format_html_navbar($id, $max_id);

	    # print log
	    
	    my @commitlog = git('log', '-n', '1', '--format=format:"%an <%ae>, %ad%n%s%n%n%b"', $commit);
	    my $author = shift @commitlog;

	    print HTML '<div class="triangle-border">'.htmlize(@commitlog).'</div>';
	    print HTML '<div class="signature">'.htmlize($author).'</div>';

	    # do the dirty diff work

	    my (@left, @right);

	    foreach my $hunk (sdiff($lastfile, $curfile)) {

		my ($type, $left, $right) = @{ $hunk };

		if ($type eq 'c') { # both changed

		    ($left, $right) = diff_single_line($left, $right);

		    push @left,  $left;
		    push @right, $right;

		} else {

		    $left  = htmlize( $left );
		    $right = htmlize( $right );
		    
		    if ($type eq '-') { # left is removed
			push @left,  add_span($left, 'red');
			push @right, $right;
			
		    } elsif ($type eq '+') { # right is added
			push @left,  $left;
			push @right, add_span($right, 'green');
			
		    } elsif ($type eq 'u') { # unchanged
			push @left,  $left;
			push @right, $right;

		    }
			
		}
	    }

	    print HTML '<table class="diff"><tr><td class="code"><code>';
	    foreach my $line (@left) {
		print HTML "$line<br>\n"
	    }
	    print HTML '</code></td><td class="code"><code>';
	    foreach my $line (@right) {
		print HTML "$line<br>\n"
	    }
	    print HTML '</code></td></tr></table>';

	    print HTML format_html_navbar($id, $max_id);

	    print HTML format_html_footer();

	    close HTML or die "can't close `$htmlfile': $1";

	    $id++;
	}
	$lastfile = $curfile;

	print "x";
    }
    print "\n";

    # clean up unique file revisions

    foreach my $commit (@commits) {
	unlink "$outdir/$commit";
    }

}


# write index.html

my $htmlfile = "${output}/index.html";
open HTML, '>', $htmlfile or die "can't open `$htmlfile': $1";

print HTML format_html_header();

print HTML "<h1>$file</h1>\n";
print HTML '<ul>';
foreach my $branch (sort keys %branch) {
    printf HTML ("<li><a href=\"%s/0000.html\">%s</a> (%04d)</li>\n",
		 $branch,
		 $branch,
		 @{$branch{$branch}->{COMMITS}} - 1
	);
}
print HTML '</ul>';

print HTML format_html_footer();

close HTML or die "can't close `$htmlfile': $1";
